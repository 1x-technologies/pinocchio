#
# Copyright (c) 2015-2020 CNRS INRIA
# Copyright (c) 2015 Wandercraft, 86 rue de Paris 91400 Orsay, France.
#

IF(BUILD_WITH_URDF_SUPPORT)
  LIST(APPEND ${PROJECT_NAME}_SOURCES
    parsers/urdf/model.cpp
    parsers/urdf/geometry.cpp
    parsers/urdf/utils.cpp
  )
ENDIF()
IF(BUILD_WITH_SDF_SUPPORT)
  LIST(APPEND ${PROJECT_NAME}_SOURCES
    parsers/sdf/model.cpp
    parsers/sdf/geometry.cpp
  )
ENDIF()

LIST(APPEND ${PROJECT_NAME}_SOURCES utils/file-explorer.cpp)

# Create header-only target
ADD_LIBRARY(${PROJECT_NAME}_headers INTERFACE)

# Exclude parts from hppfcl which is not header only
IF(BUILD_WITH_HPP_FCL_SUPPORT)
  LIST(REMOVE_ITEM CURRENT_COMPILE_DEFINITIONS PINOCCHIO_WITH_HPP_FCL)
ENDIF(BUILD_WITH_HPP_FCL_SUPPORT)

TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME}_headers INTERFACE ${CURRENT_COMPILE_DEFINITIONS})
MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME}_headers SCOPE INTERFACE
  TARGETS Eigen3::Eigen
  INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME}_headers SCOPE INTERFACE
  TARGETS Boost::filesystem Boost::system Boost::serialization
  LIBRARIES ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_SERIALIZATION_LIBRARY}
  INCLUDE_DIRS ${Boost_INCLUDE_DIRS})

set_target_properties(${PROJECT_NAME}_headers PROPERTIES INTERFACE_INCLUDE_DIRECTORIES $<INSTALL_INTERFACE:include>)
IF(WIN32)
  set_target_properties(${PROJECT_NAME}_headers PROPERTIES INTERFACE_COMPILE_OPTIONS "/bigobj")
ENDIF(WIN32)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_headers PROPERTIES
  INSTALL_RPATH "\$ORIGIN")

INSTALL(TARGETS ${PROJECT_NAME}_headers
  EXPORT ${TARGETS_EXPORT_NAME}
  LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})

# Extract the compile definitions of the project for export
GET_DIRECTORY_PROPERTY(CURRENT_COMPILE_DEFINITIONS COMPILE_DEFINITIONS)

FUNCTION(PINOCCHIO_SPECIFIC_TYPE scalar_name)
  SET(LIB_NAME "${PROJECT_NAME}_${scalar_name}")


  # Create target libpinocchio.so
  ADD_LIBRARY(${LIB_NAME} SHARED ${${PROJECT_NAME}_SOURCES})
  TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PUBLIC ${CURRENT_COMPILE_DEFINITIONS})
  SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
    LINKER_LANGUAGE CXX
    INSTALL_RPATH "\$ORIGIN")
  IF(MSVC)
    TARGET_COMPILE_OPTIONS(${LIB_NAME} PUBLIC "/bigobj")
  ENDIF()

  MODERNIZE_TARGET_LINK_LIBRARIES(${LIB_NAME} SCOPE PUBLIC
    TARGETS Eigen3::Eigen
    INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
  MODERNIZE_TARGET_LINK_LIBRARIES(${LIB_NAME} SCOPE PUBLIC
    TARGETS Boost::filesystem Boost::system Boost::serialization
    LIBRARIES ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_SERIALIZATION_LIBRARY}
    INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
  TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PUBLIC $<INSTALL_INTERFACE:include>)

  SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VERSION ${PROJECT_VERSION})
  IF(BUILD_WITH_COMMIT_VERSION)
    TAG_LIBRARY_VERSION(${LIB_NAME})
  ENDIF(BUILD_WITH_COMMIT_VERSION)
  IF(WIN32)
    TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE -DNOMINMAX)
  ENDIF(WIN32)

  # Special care of urdfdom version
  IF(urdfdom_FOUND)
    IF(${urdfdom_VERSION} VERSION_LESS "0.3.0")
      TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE -DPINOCCHIO_URDFDOM_COLLISION_WITH_GROUP_NAME)
    ENDIF(${urdfdom_VERSION} VERSION_LESS "0.3.0")

    # defines types from version 0.4.0
    IF(NOT ${urdfdom_VERSION} VERSION_LESS "0.4.0")
      TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE -DPINOCCHIO_URDFDOM_TYPEDEF_SHARED_PTR)
    ENDIF(NOT ${urdfdom_VERSION} VERSION_LESS "0.4.0")

    # std::shared_ptr appears from version 1.0.0
    IF(${urdfdom_VERSION} VERSION_GREATER "0.4.2")
      TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE -DPINOCCHIO_URDFDOM_USE_STD_SHARED_PTR)
    ENDIF(${urdfdom_VERSION} VERSION_GREATER "0.4.2")

    MODERNIZE_TARGET_LINK_LIBRARIES(${LIB_NAME} SCOPE PUBLIC
      TARGETS urdfdom::urdf_parser
      LIBRARIES ${urdfdom_LIBRARIES}
      INCLUDE_DIRS ${urdfdom_INCLUDE_DIRS})
  ENDIF(urdfdom_FOUND)

  IF(SDFormat_FOUND)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PUBLIC ${SDFormat_LIBRARIES})
  ENDIF(SDFormat_FOUND)

  IF(hpp-fcl_FOUND)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PUBLIC hpp-fcl::hpp-fcl)
  ENDIF(hpp-fcl_FOUND)

  INSTALL(TARGETS ${LIB_NAME}
    EXPORT ${TARGETS_EXPORT_NAME}
    LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})

ENDFUNCTION()

PINOCCHIO_SPECIFIC_TYPE(double)
add_library(${PROJECT_NAME} INTERFACE )
target_link_libraries(${PROJECT_NAME} INTERFACE ${PROJECT_NAME}_double)
SET(LIB_NAME "${PROJECT_NAME}_double")

ADD_HEADER_GROUP(HEADERS)
ADD_SOURCE_GROUP(${PROJECT_NAME}_SOURCES)

INSTALL(TARGETS ${PROJECT_NAME}
  EXPORT ${TARGETS_EXPORT_NAME}
  LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})
