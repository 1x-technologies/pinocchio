#
# Copyright (c) 2015-2023 CNRS INRIA
# Copyright (c) 2015 Wandercraft, 86 rue de Paris 91400 Orsay, France.
#
# ----------------------------------------------------
# --- INCLUDE ----------------------------------------
# ----------------------------------------------------

# Extract the compile definitions of the project for export

REMOVE_PATH_FROM_LIST(${PROJECT_NAME}_CORE_SOURCES "src/" ${PROJECT_NAME}_CORE_SOURCES)
REMOVE_PATH_FROM_LIST(${PROJECT_NAME}_PARSERS_SOURCES "src/" ${PROJECT_NAME}_PARSERS_SOURCES)
REMOVE_PATH_FROM_LIST(${PROJECT_NAME}_WORKSPACE_SOURCES "src/" ${PROJECT_NAME}_WORKSPACE_SOURCES)
PREPEND_PATH_FROM_LIST(${PROJECT_NAME}_CORE_PUBLIC_HEADERS
  "../"
  ${PROJECT_NAME}_CORE_PUBLIC_HEADERS)
PREPEND_PATH_FROM_LIST(${PROJECT_NAME}_PARSERS_PUBLIC_HEADERS
  "../"
  ${PROJECT_NAME}_PARSERS_PUBLIC_HEADERS)
PREPEND_PATH_FROM_LIST(${PROJECT_NAME}_WORKSPACE_PUBLIC_HEADERS
  "../"
  ${PROJECT_NAME}_WORKSPACE_PUBLIC_HEADERS)

# Create header-only target
#Â All other target will depend on it
ADD_LIBRARY(${PROJECT_NAME}_headers INTERFACE
  ${${PROJECT_NAME}_CORE_PUBLIC_HEADERS}
  ${${PROJECT_NAME}_CORE_GENERATED_PUBLIC_HEADERS})

# Enforce the preprocessed version of boost::list and boost::vector
# This information is redundant with the content of include/pinocchio/container/boost-container-limits.hpp
# but it avoids any compilation issue.
TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME}_headers INTERFACE
  BOOST_MPL_LIMIT_LIST_SIZE=30
  BOOST_MPL_LIMIT_VECTOR_SIZE=30)

IF(INITIALIZE_WITH_NAN)
  TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME}_headers INTERFACE
    EIGEN_INITIALIZE_MATRICES_BY_NAN)
ENDIF()

IF(CHECK_RUNTIME_MALLOC)
  TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME}_headers INTERFACE
    PINOCCHIO_EIGEN_CHECK_MALLOC
    EIGEN_RUNTIME_NO_MALLOC)
ENDIF(CHECK_RUNTIME_MALLOC)

MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME}_headers SCOPE INTERFACE
  TARGETS Eigen3::Eigen
  INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME}_headers SCOPE INTERFACE
  TARGETS Boost::boost Boost::serialization
  LIBRARIES ${Boost_SERIALIZATION_LIBRARY}
  INCLUDE_DIRS ${Boost_INCLUDE_DIRS})

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_headers INTERFACE
  $<INSTALL_INTERFACE:include>)

IF(MSVC)
  TARGET_COMPILE_OPTIONS(${PROJECT_NAME}_headers INTERFACE "/bigobj")
ENDIF()

INSTALL(TARGETS ${PROJECT_NAME}_headers
  EXPORT ${TARGETS_EXPORT_NAME}
  LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})

# Define a compiled target
# This functions take sources and scalar type to use
FUNCTION(PINOCCHIO_TARGET target_name)
  SET(options)
  SET(oneValueArgs SCALAR)
  SET(multiValueArgs SOURCES)
  CMAKE_PARSE_ARGUMENTS(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}"
                        ${ARGN})

  SET(LIB_NAME "${target_name}")

  ADD_LIBRARY(${LIB_NAME} SHARED ${ARGS_SOURCES})

  TARGET_LINK_LIBRARIES(${LIB_NAME} PUBLIC ${PROJECT_NAME}_headers)

  SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
    LINKER_LANGUAGE CXX
    INSTALL_RPATH "\$ORIGIN"
    VERSION ${PROJECT_VERSION})

  SET(PINOCCHIO_CONTEXT_FILE_VALUE "pinocchio/context/${ARGS_SCALAR}.hpp")
  TARGET_COMPILE_DEFINITIONS(${LIB_NAME}
    PUBLIC PINOCCHIO_ENABLE_TEMPLATE_INSTANTIATION
    PRIVATE PINOCCHIO_CONTEXT_FILE="${PINOCCHIO_CONTEXT_FILE_VALUE}")

  TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PUBLIC $<INSTALL_INTERFACE:include>)

  IF(MSVC)
    TARGET_COMPILE_OPTIONS(${LIB_NAME} PUBLIC "/bigobj")
  ENDIF()

  IF(WIN32)
    TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE NOMINMAX)
  ENDIF()

  IF(BUILD_WITH_COMMIT_VERSION)
    TAG_LIBRARY_VERSION(${LIB_NAME})
  ENDIF()

  INSTALL(TARGETS ${LIB_NAME}
    EXPORT ${TARGETS_EXPORT_NAME}
    LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})
ENDFUNCTION()

# Define a template instantiation target
FUNCTION(PINOCCHIO_SPECIFIC_TYPE scalar_name)
  SET(LIB_NAME "${PROJECT_NAME}_${scalar_name}")
  PINOCCHIO_TARGET(${LIB_NAME}
    SCALAR ${scalar_name}
    SOURCES 
      ${${PROJECT_NAME}_CORE_SOURCES})
ENDFUNCTION()

ADD_SOURCE_GROUP(${PROJECT_NAME}_CORE_SOURCES)
ADD_SOURCE_GROUP(${PROJECT_NAME}_PARSERS_SOURCES)
ADD_SOURCE_GROUP(${PROJECT_NAME}_WORKSPACE_SOURCES)
ADD_HEADER_GROUP(${PROJECT_NAME}_CORE_PUBLIC_HEADERS)
ADD_HEADER_GROUP(${PROJECT_NAME}_PARSERS_PUBLIC_HEADERS)
ADD_HEADER_GROUP(${PROJECT_NAME}_WORKSPACE_PUBLIC_HEADERS)
ADD_HEADER_GROUP(${PROJECT_NAME}_CORE_GENERATED_PUBLIC_HEADERS)

# Define the default target (double)
# This target will also have hpp-fcl and workspace module in it
PINOCCHIO_SPECIFIC_TYPE(default)

IF(BUILD_WITH_COLLISION_SUPPORT)
  TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME}_default PUBLIC
    PINOCCHIO_WITH_HPP_FCL)
  TARGET_LINK_LIBRARIES(${PROJECT_NAME}_default PUBLIC hpp-fcl::hpp-fcl)
ENDIF()

IF(BUILD_WITH_WORKSPACE_SUPPORT)
  TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME}_default PUBLIC
    PINOCCHIO_WITH_WORKSPACE_SUPPORT)
  TARGET_LINK_LIBRARIES(${PROJECT_NAME}_default PUBLIC Qhull::qhullcpp Qhull::qhull_r)
  TARGET_SOURCES(${PROJECT_NAME}_default PRIVATE
    ${${PROJECT_NAME}_WORKSPACE_SOURCES}
    ${${PROJECT_NAME}_WORKSPACE_PUBLIC_HEADERS})
ENDIF()

# Define the parsers target
# This target will have common tools for parsing/managing files and
# URDF/SRDF/SDF format support
IF(BUILD_WITH_PARSERS_SUPPORT)
  SET(PARSERS_LIB_NAME "${PROJECT_NAME}_parsers")

  PINOCCHIO_TARGET(${PARSERS_LIB_NAME}
    SCALAR default
    SOURCES 
      ${${PROJECT_NAME}_PARSERS_SOURCES}
      ${${PROJECT_NAME}_PARSERS_PUBLIC_HEADERS})

  TARGET_LINK_LIBRARIES(${PARSERS_LIB_NAME} PUBLIC ${PROJECT_NAME}_default)

  MODERNIZE_TARGET_LINK_LIBRARIES(${PARSERS_LIB_NAME} SCOPE PUBLIC
    TARGETS Boost::filesystem
    LIBRARIES ${Boost_FILESYSTEM_LIBRARY}}
    INCLUDE_DIRS ${Boost_INCLUDE_DIRS})

  # Special care of urdfdom version
  IF(BUILD_WITH_URDF_SUPPORT)
    TARGET_COMPILE_DEFINITIONS(${PARSERS_LIB_NAME} PUBLIC
      PINOCCHIO_WITH_URDFDOM)

    IF(${urdfdom_VERSION} VERSION_LESS "0.3.0")
      TARGET_COMPILE_DEFINITIONS(${PARSERS_LIB_NAME} PRIVATE
        PINOCCHIO_URDFDOM_COLLISION_WITH_GROUP_NAME)
    ENDIF()
    # defines types from version 0.4.0
    IF(NOT ${urdfdom_VERSION} VERSION_LESS "0.4.0")
      TARGET_COMPILE_DEFINITIONS(${PARSERS_LIB_NAME} PRIVATE
        PINOCCHIO_URDFDOM_TYPEDEF_SHARED_PTR)
    ENDIF()
    # std::shared_ptr appears from version 1.0.0
    IF(${urdfdom_VERSION} VERSION_GREATER "0.4.2")
      TARGET_COMPILE_DEFINITIONS(${PARSERS_LIB_NAME} PRIVATE
        PINOCCHIO_URDFDOM_USE_STD_SHARED_PTR)
    ENDIF()

    MODERNIZE_TARGET_LINK_LIBRARIES(${PARSERS_LIB_NAME} SCOPE PUBLIC
      TARGETS urdfdom::urdf_parser
      LIBRARIES ${urdfdom_LIBRARIES}
      INCLUDE_DIRS ${urdfdom_INCLUDE_DIRS})
  ENDIF()

  IF(BUILD_WITH_SDF_SUPPORT)
    TARGET_COMPILE_DEFINITIONS(${PARSERS_LIB_NAME} PUBLIC
      PINOCCHIO_WITH_SDFORMAT)

    TARGET_LINK_LIBRARIES(${PARSERS_LIB_NAME} PUBLIC ${SDFormat_LIBRARIES})
  ENDIF()
ENDIF()

# Define cppad codegen target
IF(BUILD_WITH_CODEGEN_SUPPORT)
  PINOCCHIO_SPECIFIC_TYPE(cppadcg)
  TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_cppadcg SYSTEM PUBLIC ${cppadcg_INCLUDE_DIR})
  TARGET_LINK_LIBRARIES(${PROJECT_NAME}_cppadcg PUBLIC ${cppadcg_LIBRARY} ${cppad_LIBRARY})
ENDIF()

# Define cppad target
IF(BUILD_WITH_AUTODIFF_SUPPORT)
  PINOCCHIO_SPECIFIC_TYPE(cppad)
  TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_cppad SYSTEM PUBLIC ${cppad_INCLUDE_DIR})
  TARGET_LINK_LIBRARIES(${PROJECT_NAME}_cppad PUBLIC ${cppad_LIBRARY})
ENDIF()

# Define casadi target
IF(BUILD_WITH_CASADI_SUPPORT)
  PINOCCHIO_SPECIFIC_TYPE(casadi)
  TARGET_LINK_LIBRARIES(${PROJECT_NAME}_casadi PUBLIC casadi)
ENDIF()

# Define main target (default and parsers)
ADD_LIBRARY(${PROJECT_NAME} INTERFACE)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} INTERFACE ${PROJECT_NAME}_default)
IF(BUILD_WITH_PARSERS_SUPPORT)
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} INTERFACE ${PROJECT_NAME}_parsers)
ENDIF()

INSTALL(TARGETS ${PROJECT_NAME}
  EXPORT ${TARGETS_EXPORT_NAME}
  LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})
